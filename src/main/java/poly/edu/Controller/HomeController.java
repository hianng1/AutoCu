package poly.edu.Controller;

import java.util.List;
import java.util.Optional;

import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.servlet.http.HttpSession;
import poly.edu.DAO.DanhMucDAO;
import poly.edu.DAO.KhachHangDAO;
import poly.edu.DAO.MaKhuyenMaiDAO;
import poly.edu.DAO.NhanVienDAO;
import poly.edu.DAO.PhuKienOtoDAO;
import poly.edu.DAO.SanPhamDAO;
import poly.edu.DAO.UserDAO;
import poly.edu.Model.*;
import poly.edu.Repository.UserRepository;
import poly.edu.Service.PhuKienOtoService;
import poly.edu.Service.SanPhamService;
import poly.edu.Service.UserService;

@Controller
public class HomeController {
	
	@Autowired
    private DanhMucDAO danhMucDAO;
    @Autowired
    private SanPhamDAO sanPhamDAO;
    @Autowired
    private NhanVienDAO nhanVienDAO;
    @Autowired
    private KhachHangDAO KhachHangDAO;
    @Autowired
    private MaKhuyenMaiDAO maKhuyenMaiDAO;
    @Autowired
    private PhuKienOtoDAO phuKienOtoDAO;
    @Autowired

    private SanPhamService sanPhamService;
    @Autowired
    private PhuKienOtoService phuKienOtoService;
    @GetMapping(value = "/trangchu", produces = "text/html; charset=UTF-8")
    public String home(Model model) {
        try {
            List<SanPham> sanPhamList = sanPhamDAO.findAll();
            model.addAttribute("sanPhamList", sanPhamList);
            List<DanhMuc> danhMucList = danhMucDAO.findAll();
            model.addAttribute("danhMucList", danhMucList);
            List<NhanVien> nhanVienList = nhanVienDAO.findAll();
            model.addAttribute("nhanVienList", nhanVienList);
            List<KhachHang> khachHangList = KhachHangDAO.findAll();
            model.addAttribute("khachHangList", khachHangList);
            List<MaKhuyenMai> maKhuyenMaiList = maKhuyenMaiDAO.findAll();
            model.addAttribute("maKhuyenMaiList", maKhuyenMaiList);
            List<PhuKienOto> phuKienOtoList = phuKienOtoService.findAll();
            model.addAttribute("phuKienOtoList", phuKienOtoList);


            
        } catch (Exception e) {
            model.addAttribute("error", "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m: " + e.getMessage());
        }
        return "index2";
    }
    @GetMapping("/checkout")
    public String checkoutPage(Model model) {
        // G√°n d·ªØ li·ªáu n·∫øu c·∫ßn
		/* model.addAttribute("title", "Trang thanh to√°n"); */
        
        // Tr·∫£ v·ªÅ file templates/checkout.html
        return "checkout";
    }
    
    //test
    @Autowired
    private UserService userService;

    // Hi·ªÉn th·ªã form ƒëƒÉng k√Ω
    @GetMapping("/register")
    public String showRegisterForm(Model model) {
        return "register";
    }

    // X·ª≠ l√Ω ƒëƒÉng k√Ω
    @PostMapping("/register")
    public String register(@RequestParam String username,
                           @RequestParam String password,
                           @RequestParam String email,
                           @RequestParam String hovaten,
                           @RequestParam(required = true) String sodienthoai,
                           @RequestParam String soNha,
                           @RequestParam String phuongXa,
                           @RequestParam String quanHuyen,
                           @RequestParam String tinhThanh,
                           Model model,
                           RedirectAttributes redirectAttributes) {
        // K·∫øt h·ª£p c√°c ph·∫ßn th√¥ng tin ƒë·ªãa ch·ªâ ƒë·ªÉ t·∫°o th√†nh ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
        String diaChiFull = String.join(", ", soNha, phuongXa, quanHuyen, tinhThanh);
        
        // G·ªçi service ƒë·ªÉ th·ª±c hi·ªán ƒëƒÉng k√Ω
        String result = userService.registerUser(username, password, email, hovaten, sodienthoai, diaChiFull);
        
        // Ki·ªÉm tra k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ service
        if ("ƒêƒÉng k√Ω th√†nh c√¥ng!".equals(result)) {
            redirectAttributes.addFlashAttribute("message", "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.");
            return "redirect:/login"; // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang login n·∫øu ƒëƒÉng k√Ω th√†nh c√¥ng
        }

        // N·∫øu ƒëƒÉng k√Ω th·∫•t b·∫°i, g·ª≠i th√¥ng b√°o l·ªói t·ªõi model v√† tr·∫£ v·ªÅ trang ƒëƒÉng k√Ω
        model.addAttribute("message", result);
        return "register"; // N·∫øu ƒëƒÉng k√Ω th·∫•t b·∫°i, v·∫´n ·ªü trang ƒëƒÉng k√Ω
    }


    // Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p
    @GetMapping("/login")
    public String showLoginForm(@RequestParam(value = "message", required = false) String message, Model model) {
        if (message != null && !message.isEmpty()) {
            model.addAttribute("message", message);
        }
        return "login";
    }

    // X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
    @PostMapping("/login")
    public String login(@RequestParam String username,
                        @RequestParam String password,
                        HttpSession session,
                        Model model) {
        Optional<User> user = userService.authenticate(username, password);

        if (user.isPresent()) {
            session.setAttribute("loggedInUser", user.get());
            return "redirect:/home"; // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ch·ªß sau khi ƒëƒÉng nh·∫≠p
        } else {
            model.addAttribute("error", "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!");
            return "login"; // N·∫øu sai th√¥ng tin, quay l·∫°i trang ƒëƒÉng nh·∫≠p
        }
    }

    // X·ª≠ l√Ω ƒëƒÉng xu·∫•t
    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/login";
    }

    // Hi·ªÉn th·ªã trang home sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    @GetMapping("/home")
    public String home(HttpSession session, Model model) {
        User loggedInUser = (User) session.getAttribute("loggedInUser");

        if (loggedInUser == null) {
            return "redirect:/login"; // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, quay l·∫°i trang ƒëƒÉng nh·∫≠p
        }

        model.addAttribute("user", loggedInUser);

        if ("ADMIN".equals(loggedInUser.getRole())) {
            return "redirect:/quantri"; // Chuy·ªÉn ƒë·∫øn trang admin n·∫øu l√† admin
        } else {
            return "redirect:/trangchu";  // Chuy·ªÉn ƒë·∫øn trang user n·∫øu l√† user th∆∞·ªùng
        }
    }
    @Autowired
    private UserDAO userDAO;
	
    @GetMapping
    public String danhSachNguoiDung(Model model) {
    	List<User> users = userDAO.findAll(); // L·∫•y *t·∫•t c·∫£* user
        model.addAttribute("users", users);
        return "Admin/quantri";
    }
    
    
    
    @GetMapping("/details/{productId}")
    public String getDetailsByProductId(@PathVariable("productId") Long productId, Model model) {
        List<SanPham> details = sanPhamDAO.findByProductId(productId);

        if (!details.isEmpty()) {
            SanPham sanPham = details.get(0);
            Long categoryID = sanPham.getDanhMuc().getCategoryID(); // D√πng ki·ªÉu Long

            // üõ† Debug
            System.out.println("CategoryID: " + categoryID);
            System.out.println("ProductID: " + productId);

            List<SanPham> sanPhamTuongTu = sanPhamService.getSanPhamTuongTu(categoryID, productId);
            System.out.println("S·ªë s·∫£n ph·∫©m t∆∞∆°ng t·ª±: " + sanPhamTuongTu.size());

            model.addAttribute("sanPhamTuongTu", sanPhamTuongTu);
        }

        model.addAttribute("details", details);
        return "Detail";
    }

    
    
    
    
    // s·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u v√† ƒë√¥i m·∫≠t kh·∫©u 
    

 // Qu√™n m·∫≠t kh·∫©u
	/*
	 * @PostMapping("/forgot-password") public String forgotPassword(@RequestParam
	 * String email, Model model) { String result =
	 * userService.handleForgotPassword(email); model.addAttribute("message",
	 * result); return "forgot-password"; // Quay l·∫°i trang qu√™n m·∫≠t kh·∫©u v·ªõi th√¥ng
	 * b√°o k·∫øt qu·∫£ }
	 * 
	 * @PostMapping("/change-password") public String changePassword(@RequestParam
	 * Long userId,
	 * 
	 * @RequestParam String currentPassword,
	 * 
	 * @RequestParam String newPassword, Model model) { String result =
	 * userService.changePassword(userId, currentPassword, newPassword);
	 * model.addAttribute("message", result); // Th√™m th√¥ng b√°o k·∫øt qu·∫£ v√†o model
	 * model.addAttribute("userId", userId); // Truy·ªÅn l·∫°i userId ƒë·ªÉ gi·ªØ gi√° tr·ªã
	 * trong form return "change-password"; // Quay l·∫°i trang ƒë·ªïi m·∫≠t kh·∫©u v·ªõi th√¥ng
	 * b√°o k·∫øt qu·∫£ }
	 * 
	 * // Hi·ªÉn th·ªã trang ƒë·ªïi m·∫≠t kh·∫©u
	 * 
	 * @GetMapping("/change-password") public String
	 * showChangePasswordPage(@RequestParam Long userId, Model model) {
	 * model.addAttribute("userId", userId); // Truy·ªÅn userId v√†o model ƒë·ªÉ hi·ªÉn th·ªã
	 * trong form return "change-password"; }
	 * 
	 * 
	 * @GetMapping("/forgot-password") public String showForgotPasswordPage() {
	 * return "forgot-password"; // Tr·∫£ v·ªÅ trang qu√™n m·∫≠t kh·∫©u }
	 */
    
    
// ph·∫ßn g·ª≠i mail v·ªõi ƒë·ªïi m√¢t kh·∫©u 

    @Autowired
    private UserRepository userRepository;

    @GetMapping("/forgot-password")
    public String showForgotPasswordPage() {
        return "forgot-password";
    }

    @PostMapping("/forgot-password")
    public String forgotPassword(@RequestParam String email, Model model, RedirectAttributes redirectAttributes) {
        String result = userService.handleForgotPassword(email);
        if (result.contains("ƒë√£ ƒë∆∞·ª£c g·ª≠i")) {
            User user = userRepository.findByEmail(email).get();
            redirectAttributes.addFlashAttribute("message", result);
            return "redirect:/change-password?userId=" + user.getId();
        } else {
            model.addAttribute("message", result);
            return "forgot-password";
        }
    }

    @GetMapping("/change-password")
    public String showChangePasswordPage(@RequestParam Long userId, Model model) {
        model.addAttribute("userId", userId);
        return "change-password";
    }

    @PostMapping("/change-password")
    public String changePassword(@RequestParam Long userId,
                                 @RequestParam String currentPassword,
                                 @RequestParam String newPassword,
                                 Model model, RedirectAttributes redirectAttributes) {
        String result = userService.changePassword(userId, currentPassword, newPassword);
        if (result.contains("th√†nh c√¥ng")) {
            redirectAttributes.addFlashAttribute("message", result);
            return "redirect:/login";
        } else {
            model.addAttribute("message", result);
            model.addAttribute("userId", userId);
            return "change-password";
        }
    }
    
    
    
    
    
    
}
